type DocFlowUser {
  id: String!
  name: String
}

type DocFlowState {
  id: String!
  name: String
}

type DocFlowFile {
  id: String!
  name: String
  presentation: String
  allowDeletion: Boolean
}

type DocFlowParentTask {
  id: String!
  name: String
}

type DocFlowImportance {
  id: String!
  name: String
}

type DocFlowTask {
  id: String!
  name: String!
  importance: DocFlowImportance
  executor: DocFlowUser
  executed: Boolean
  executionMark: String
  beginDate: Date
  dueDate: Date
  endDate: Date
  files: [DocFlowFile]
  description: String
  parentTask: DocFlowParentTask
  processStep: String
  executionComment: String
  author: DocFlowUser!
  accepted: Boolean
  acceptDate: Date
  state: DocFlowState
}

input DocFlowTasksInput {
  cache: Boolean
}

input DocFlowTaskInput {
  cache: Boolean
}

input DocFlowFileInput {
  cache: Boolean
}

type Query {
  docFlowGetTasks(tasks: DocFlowTasksInput): [DocFlowTask!]
  docFlowGetTask(task: DocFlowTaskInput): DocFlowTask!
  docFlowGetFile(file: DocFlowFileInput): DocFlowFile!
}

type Subscription {
  docFlowGetTasks(tasks: DocFlowTasksInput): [DocFlowTask!]
  docFlowGetTask(task: DocFlowTaskInput): DocFlowTask!
  docFlowGetFile(file: DocFlowFileInput): DocFlowFile!
}
