type TkService {
  where: String!
  code: String!
  name: String!
  description: String
  avatar: String
}

type TkRoute {
  where: String!
  code: String!
  name: String!
  description: String
  avatar: String
  services: [TkService!]
}

type TkUser {
  where: String!
  name: String!
  avatar: String
  email: String
  telephone: String
  company: String
  department: String
  division: String
  title: String
}

type TkFile {
  code: String!
  name: String!
  ext: String
}

type TkAuthorComments {
  users: [TkUser]
  comments: [TkComment]
}

type TkComment {
  where: String!
  date: String
  authorLogin: String
  body: String
  task: String
  code: String
  parentCode: String
}

type TkTask {
  where: String!
  code: String!
  type: String
  name: String!
  description: String!
  descriptionFull: String
  status: String!
  avatar: String
  service: TkService
  createdDate: Date!
  endDate: String
  timeoutDate: String
  initiatorUser: TkUser!
  executorUser: TkUser
  availableAction: String
  availableStages: String
  files: [TkFile!]
  comments: TkAuthorComments
}

type TkTaskNew {
  where: String!
  code: String!
  name: String!
  requisiteSource: String!
  category: String!
  organization: String!
  status: String!
  createdDate: Date!
}

input TkTaskNewInput {
  where: String!
  title: String!
  body: String!
  #  Service Id
  service: String!
  # Login
  executorUser: String
}

input TkTaskEditInput {
  where: String!
  code: String!
  type: String!
  comment: String!
}

input TkTaskDescriptionInput {
  where: String!
  code: String!
}

type TkRoutes {
  routes: [TkRoute]
  error: String
}

type TkTasks {
  tasks: [TkTask]
  error: String
}

type Query {
  TicketsRoutes: [TkRoutes!]
  TicketsTasks(status: String, find: String): [TkTasks!]
  TicketsTaskDescription(task: TkTaskDescriptionInput!): TkTask
}

type Mutation {
  TicketsTaskNew(task: TkTaskNewInput!, attachments: [Upload]): TkTaskNew!
  TicketsTaskEdit(task: TkTaskEditInput!, attachments: [Upload]): TkTask!
}
