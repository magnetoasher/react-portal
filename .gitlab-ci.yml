stages:
  - bundle
  # - test
  - build
  - production
  - deploy

variables:
  PRODUCTION_NAMESPACE: default
  DOCKER_TLS_CERTDIR: "/certs"
  DOCKER_DRIVER: overlay2
  PRODUCTION_NAMESPACE: production
  PREFIX: kngk
  RELEASE_NAME: ${PREFIX}-${CI_PROJECT_NAME}
  CONTAINER_IMAGE: ${PREFIX}-${CI_PROJECT_NAME}:${CI_BUILD_REF_NAME}_${CI_BUILD_REF}
  CONTAINER_IMAGE_LATEST: ${PREFIX}-${CI_PROJECT_NAME}:latest

cache:
  key: ${CI_COMMIT_REF_SLUG}
  untracked: true
  # paths:
  #   - node_modules/

bundle:
  image: node:12
  stage: bundle
  before_script:
    - ls -la
    # - rm -rf node_modules/
    - yarn
    - ls -la node_modules/
    - ls -la node_modules/@types
  script:
    - cp --remove-destination "${ENVIRONMENT_VARIABLES}" .env
    - cp --remove-destination "${JWT_PRIVATE_PEM}" jwt.private.pem
    - cp --remove-destination "${JWT_PUBLIC_PEM}" jwt.public.pem
  artifacts:
    paths:
      - .env
      - jwt.public.pem
      - jwt.private.pem
    expire_in: 3 hours

test:
  image: node:12
  stage: test
  before_script:
    - ls -la
    - yarn
    - ls -la
  script:
    - yarn test -u

build:
  image: node:12
  stage: build
  before_script:
    - ls -la
    - yarn
    - ls -la
  script:
    - yarn build
  artifacts:
    paths:
      - .nest/
      - .next/
    expire_in: 3 hours

production:
  stage: production
  image: docker:latest
  script:
    - docker build --tag ${CONTAINER_IMAGE} .
    - docker tag ${CONTAINER_IMAGE} ${CONTAINER_IMAGE_LATEST}

deploy:
  stage: deploy
  image: dtzar/helm-kubectl
  before_script:
    - helm init
  script:
    - export DEPLOYS=$(helm ls | grep ${RELEASE_NAME} | wc -l)
    - if [ ${DEPLOYS} -eq 0 ]; then helm install --replace --namespace=${PRODUCTION_NAMESPACE} --name=${RELEASE_NAME} --debug helm/kngk-portal; else helm upgrade --namespace=${PRODUCTION_NAMESPACE} --debug ${RELEASE_NAME} helm/kngk-portal; fi
    
