stages:
  - bundle_test_build
  - production
  - deploy

# TODO: сделать чтобы tests запускалось в контейнере с yarn install --production=false,
# TODO: а production в котрейнере с yarn install --production=true
variables:
  PRODUCTION_NAMESPACE: default
  DOCKER_DRIVER: overlay2
  PRODUCTION_NAMESPACE: production
  PREFIX: ""
  RELEASE_NAME: ${PREFIX}${CI_PROJECT_NAME}
  CONTAINER_IMAGE: ${PREFIX}${CI_PROJECT_NAME}:${CI_BUILD_REF_NAME}_${CI_BUILD_REF}
  CONTAINER_IMAGE_LATEST: ${PREFIX}${CI_PROJECT_NAME}:latest

bundle_test_build:
  image: node:12
  stage: bundle_test_build
  cache:
    key: "${CI_COMMIT_REF_SLUG}"
    paths:
      - node_modules/
  script:
    - time yarn install --production=false
    - time yarn test -u
    - time bash entrypoint.sh true
    - time npx next telemetry --disable
    - time yarn build
  artifacts:
    paths:
      - .nest/
      - .next/
    expire_in: 3 hours

production:
  image: docker:latest
  stage: production
  cache:
    key: "${CI_COMMIT_REF_SLUG}"
    paths:
      - node_modules/
    policy: pull
  before_script:
    - cp --remove-destination "${JWT_PRIVATE_PEM}" jwt.private.pem && cp --remove-destination "${JWT_PUBLIC_PEM}" jwt.public.pem
  script:
    - |
      if [ ! -d "node_modules" ]; then echo '!! CACHE NOT EXIST !!'; exit SIGINT; fi
    - |
      export DEPLOYS=$(docker images ${RELEASE_NAME} | wc -l); \
      if [ ! ${DEPLOYS} -eq 1 ]; then \
        docker image rm ${RELEASE_NAME}; \
      fi
    - time docker build --tag ${CONTAINER_IMAGE} .
    - docker tag ${CONTAINER_IMAGE} ${CONTAINER_IMAGE_LATEST}
    - docker images ${RELEASE_NAME}

deploy:
  image: dtzar/helm-kubectl
  stage: deploy
  dependencies: []
  script:
    - time helm init --client-only
    - export DEPLOYS=$(helm ls ${RELEASE_NAME} | wc -l)
    - |
      if [ ! ${DEPLOYS} -eq 0 ]; then \
        time helm del --purge ${RELEASE_NAME}; \
        sleep 1; \
      fi
    - |
      if [ ${DEPLOYS} -eq 0 ]; then \
        time helm install --namespace=${PRODUCTION_NAMESPACE} --name=${RELEASE_NAME} \
          --debug --values helm/portal/values.yaml \
          --set NODE_ENV="${NODE_ENV}" \
          --set HOST="${HOST}" \
          --set PORT="${PORT}" \
          --set PORT_DEBUGGER="${PORT_DEBUGGER}" \
          --set DATABASE_CONNECTION="${DATABASE_CONNECTION}" \
          --set DATABASE_HOST="${DATABASE_HOST}" \
          --set DATABASE_PORT="${DATABASE_PORT}" \
          --set DATABASE_USERNAME="${DATABASE_USERNAME}" \
          --set DATABASE_PASSWORD="${DATABASE_PASSWORD}" \
          --set DATABASE_DATABASE="${DATABASE_DATABASE}" \
          --set DATABASE_SCHEMA="${DATABASE_SCHEMA}" \
          --set DATABASE_SYNCHRONIZE="${DATABASE_SYNCHRONIZE}" \
          --set DATABASE_DROP_SCHEMA="${DATABASE_DROP_SCHEMA}" \
          --set DATABASE_MIGRATIONS_RUN="${DATABASE_MIGRATIONS_RUN}" \
          --set DATABASE_LOGGING="${DATABASE_LOGGING}" \
          --set DATABASE_CACHE="${DATABASE_CACHE}" \
          --set REDIS_HOST="${REDIS_HOST}" \
          --set REDIS_PORT="${REDIS_PORT}" \
          --set REDIS_DB="${REDIS_DB}" \
          --set REDIS_PASSWORD="${REDIS_PASSWORD}" \
          --set REDIS_PREFIX="${REDIS_PREFIX}" \
          --set SESSION_SECRET="${SESSION_SECRET}" \
          --set LDAP_URL="${LDAP_URL}" \
          --set LDAP_BIND_DN="${LDAP_BIND_DN}" \
          --set LDAP_BIND_PW="${LDAP_BIND_PW}" \
          --set LDAP_SEARCH_BASE="${LDAP_SEARCH_BASE}" \
          --set LDAP_SEARCH_FILTER="${LDAP_SEARCH_FILTER}" \
          helm/portal; \
      else \
        time helm upgrade --install --namespace=${PRODUCTION_NAMESPACE} \
          --debug --values helm/portal/values.yaml \
          --set NODE_ENV="${NODE_ENV}" \
          --set HOST="${HOST}" \
          --set PORT="${PORT}" \
          --set PORT_DEBUGGER="${PORT_DEBUGGER}" \
          --set DATABASE_CONNECTION="${DATABASE_CONNECTION}" \
          --set DATABASE_HOST="${DATABASE_HOST}" \
          --set DATABASE_PORT="${DATABASE_PORT}" \
          --set DATABASE_USERNAME="${DATABASE_USERNAME}" \
          --set DATABASE_PASSWORD="${DATABASE_PASSWORD}" \
          --set DATABASE_DATABASE="${DATABASE_DATABASE}" \
          --set DATABASE_SCHEMA="${DATABASE_SCHEMA}" \
          --set DATABASE_SYNCHRONIZE="${DATABASE_SYNCHRONIZE}" \
          --set DATABASE_DROP_SCHEMA="${DATABASE_DROP_SCHEMA}" \
          --set DATABASE_MIGRATIONS_RUN="${DATABASE_MIGRATIONS_RUN}" \
          --set DATABASE_LOGGING="${DATABASE_LOGGING}" \
          --set DATABASE_CACHE="${DATABASE_CACHE}" \
          --set REDIS_HOST="${REDIS_HOST}" \
          --set REDIS_PORT="${REDIS_PORT}" \
          --set REDIS_DB="${REDIS_DB}" \
          --set REDIS_PASSWORD="${REDIS_PASSWORD}" \
          --set REDIS_PREFIX="${REDIS_PREFIX}" \
          --set SESSION_SECRET="${SESSION_SECRET}" \
          --set LDAP_URL="${LDAP_URL}" \
          --set LDAP_BIND_DN="${LDAP_BIND_DN}" \
          --set LDAP_BIND_PW="${LDAP_BIND_PW}" \
          --set LDAP_SEARCH_BASE="${LDAP_SEARCH_BASE}" \
          --set LDAP_SEARCH_FILTER="${LDAP_SEARCH_FILTER}" \
          ${RELEASE_NAME} helm/portal; \
      fi
