stages:
  - bundle
  # - test
  # - build
  - production
  - deploy

variables:
  # KUBECONFIG: helm/kubelet.conf
  PRODUCTION_NAMESPACE: default
  DOCKER_TLS_CERTDIR: "/certs"
  DOCKER_DRIVER: overlay2
  PRODUCTION_NAMESPACE: production
  PREFIX: kngk
  RELEASE_NAME: ${PREFIX}-${CI_PROJECT_NAME}
  CONTAINER_IMAGE: ${PREFIX}-${CI_PROJECT_NAME}:${CI_BUILD_REF_NAME}_${CI_BUILD_REF}
  CONTAINER_IMAGE_LATEST: ${PREFIX}-${CI_PROJECT_NAME}:latest

bundle:
  image: node:12
  stage: bundle
  script:
    - cp --remove-destination "${ENVIRONMENT_VARIABLES}" .env
    - cp --remove-destination "${JWT_PRIVATE_PEM}" jwt.private.pem
    - cp --remove-destination "${JWT_PUBLIC_PEM}" jwt.public.pem
    # - yarn
  cache:
    key: ${CI_COMMIT_REF_SLUG}-${CI_PROJECT_PATH_SLUG}
    policy: pull-push
    paths:
      - node_modules/
  artifacts:
    paths:
      - .env
      - jwt.public.pem
      - jwt.private.pem
    expire_in: 12 hours

# test:
#   image: node:12
#   stage: test
#   cache:
#     key: ${CI_COMMIT_REF_SLUG}-${CI_PROJECT_PATH_SLUG}
#     policy: pull
#     paths:
#       - node_modules/
#   script:
#     - yarn test -u

# build:
#   image: node:12
#   stage: build
#   cache:
#     key: ${CI_COMMIT_REF_SLUG}-${CI_PROJECT_PATH_SLUG}
#     policy: pull
#     paths:
#       - node_modules/
#   script:
#     - yarn build
#   artifacts:
#     paths:
#       - .nest/
#       - .next/
#     expire_in: 12 hours

production:
  stage: production
  image: docker:latest
  cache:
    key: ${CI_COMMIT_REF_SLUG}-${CI_PROJECT_PATH_SLUG}
    policy: pull
    paths:
      - node_modules/
  script:
    # - export DOCKER_IMAGES=`docker images ${RELEASE_NAME} | awk '{if(a>0){b=1};a++} END{if(b==1){print 1}else{print 0}}'`
    # - test $DOCKER_IMAGES -eq 1 && docker image rm ${RELEASE_NAME}
    - docker build --tag ${CONTAINER_IMAGE} .
    - docker tag ${CONTAINER_IMAGE} ${CONTAINER_IMAGE_LATEST}

deploy:
  stage: deploy
  image: dtzar/helm-kubectl
  cache:
    key: ${CI_COMMIT_REF_SLUG}-${CI_PROJECT_PATH_SLUG}
    policy: pull
    paths:
      - node_modules/
  before_script:
    - helm init
  script:
    - export DEPLOYS=$(helm ls | grep ${RELEASE_NAME} | wc -l)
    - if [ ${DEPLOYS} -eq 0 ]; then helm install --replace --namespace=${PRODUCTION_NAMESPACE} --name=${RELEASE_NAME} --debug helm/kngk-portal; else helm upgrade --namespace=${PRODUCTION_NAMESPACE} --debug ${RELEASE_NAME} helm/kngk-portal; fi
    
